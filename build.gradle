plugins {
  id 'com.github.ben-manes.versions' version '0.53.0'
  id 'scala'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.gradleup.nmcp.aggregation' version '1.2.0'
}

description = 'Pulumi tooling'
group = 'org.podval.tools'
version = '0.4.0'

final String gitHubRepository = "dubinsky/pulumi"
final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
final String orgName = 'Podval Group'
final String orgUrl = 'https://www.podval.org'

scala.scalaVersion = '3.7.3'

dependencies {
  // TODO? scalaCompilerPlugins "org.virtuslab:besom-compiler-plugin_3:0.4.0"
  compileOnly 'org.virtuslab:besom-core_3:0.5.0'
  compileOnly 'org.virtuslab:besom-gcp_3:9.0.0-core.0.5'
  compileOnly 'org.virtuslab:besom-cloudflare_3:6.9.1-core.0.5'
}

def isNonStable = { String version ->
  boolean stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  String regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

// dependencyUpdates.revision = 'release'
tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version)
  }
}

tasks.withType(ScalaCompile).configureEach {
  scalaCompileOptions.with {
    targetCompatibility = '' // TODO remove when https://youtrack.jetbrains.com/issue/SCL-18813 is fixed
    additionalParameters = [
      '-new-syntax',
      '-feature',
      '-language:strictEquality',
      '-source:future'
    ]
  }
}

jar {
  manifest {
    attributes(
      'Implementation-Title'  : project.description,
      'Implementation-Version': project.version
    )
  }
}

tasks.register('sourcesJar', Jar) {
  from sourceSets.main.allSource
  archiveClassifier = 'sources'
}

tasks.register('scaladocJar', Jar) {
  from scaladoc.destinationDir
  archiveClassifier = 'scaladoc'
}
scaladocJar.dependsOn scaladoc

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')
// but Maven Central requires javadoc JAR...
tasks.register('javadocJar', Jar) {
  from javadoc.destinationDir
  archiveClassifier = 'javadoc'
}
javadocJar.dependsOn(javadoc)

// ./gradlew nmcpZipAggregation - to see what will be published
// ./gradlew publishAggregationToCentralPortal - to publish
// https://central.sonatype.com/publishing/deployments - to release
nmcpAggregation {
  // Publish all projects that apply the 'maven-publish' plugin
  publishAllProjectsProbablyBreakingProjectIsolation()

  centralPortal {
    publishingType = "USER_MANAGED"
    username = findProperty('mavenCentralUsername') as String
    password = findProperty('mavenCentralPassword') as String
  }
}

publishing {
  publications {
    library(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact scaladocJar
      artifact javadocJar

      pom {
        name = project.name
        description = project.description
        url = gitHubRepositoryUrl
        scm {
          url = gitHubRepositoryUrl
          connection = "scm:git:git://github.com/${gitHubRepository}.git"
          developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
            comments = 'A business-friendly OSS license'
          }
        }
        organization {
          name = orgName
          url = orgUrl
        }
        developers {
          developer {
            id = 'dub'
            name = 'Leonid Dubinsky'
            email = 'dub@podval.org'
            url = 'https://dub.podval.org'
            organization = orgName
            organizationUrl = orgUrl
            timezone = '-5'
          }
        }
      }
    }
  }
}

signing {
  useInMemoryPgpKeys(
    findProperty('gnupg.dub-podval-org.key') as String,
    findProperty('gnupg.dub-podval-org.password') as String
  )
  sign publishing.publications.library
}

tasks.register('upload')
upload.description = 'Upload artifacts'
upload.group = 'publishing'
upload.dependsOn(publishAggregationToCentralPortal)
